import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import gspread
import os
from dotenv import load_dotenv
load_dotenv()
import json
from google.oauth2.service_account import Credentials

import os
TOKEN = os.environ["BOT_TOKEN"]
GOOGLE_MAPS_LINK = "https://maps.app.goo.gl/wsAj7p5Fb8FtcRWa7"
SPREADSHEET_ID = "1syQja7ntuuv1mGP8BOapb0W1b8wTrV7Zce2ZOHnr4Ho"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê—Ä–µ–Ω–¥–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π"), KeyboardButton(text="–ê—Ä–µ–Ω–¥–∞ –ë–∞–π–∫–æ–≤")],
        [KeyboardButton(text="–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏"), KeyboardButton(text="–û–Ω–ª–∞–π–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä")],
        [KeyboardButton(text="–¶–µ–Ω—ã –∏ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è")]
    ],
    resize_keyboard=True
)

def get_credentials():
    return Credentials.from_service_account_file(
        os.environ["CREDENTIALS_FILE"],
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )

def load_bikes_from_sheet():
    credentials = get_credentials()
    gc = gspread.authorize(credentials)
    sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("Bike")
    data = sheet.get_all_values()
    rows = data[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏


    bikes = {}
    for row in rows:
        if len(row) < 4:
            continue
        try:
            num = int(row[0])
        except ValueError:
            continue
        bikes[num] = {
            "name": row[1],
            "price": row[2],
            "photo": row[3],
            "description": ""
        }
    return bikes

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –±–∞–π–∫–∏ –∏–∑ Google Sheets
bikes = load_bikes_from_sheet()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤—Ç–æ (–±—É–¥–µ—Ç –ø–æ–∑–∂–µ)
cars = {
    1: {"name": "Toyota Corolla", "price": "1500 THB/–¥–µ–Ω—å", "photo": "https://example.com/car1.jpg", "description": "–ê–≤—Ç–æ–º–∞—Ç, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"},
    2: {"name": "Honda Civic", "price": "1700 THB/–¥–µ–Ω—å", "photo": "https://example.com/car2.jpg", "description": "–ê–≤—Ç–æ–º–∞—Ç, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω"},
}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_kb)

@dp.message(lambda message: message.text == "–ê—Ä–µ–Ω–¥–∞ –ë–∞–π–∫–æ–≤")
async def rent_bikes_handler(message: types.Message):
    photo_url = "https://i.ibb.co/5Vnppdt/photo-2024-12-30-09-15-13.jpg"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—â–µ–µ —Ñ–æ—Ç–æ –±–∞–π–∫–æ–≤
    await bot.send_photo(message.chat.id, photo_url, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π–∫ –ø–æ –Ω–æ–º–µ—Ä—É:")

    builder = InlineKeyboardBuilder()
    for num in bikes:
        builder.button(text=str(num), callback_data=f"bike_{num}")
    builder.button(text="–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è", url=GOOGLE_MAPS_LINK)
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(5)
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏:", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith("bike_"))
async def process_callback_bike(callback: types.CallbackQuery):
    _, num_str = callback.data.split("_")
    num = int(num_str)
    model = bikes.get(num)

    if not model:
        await callback.answer("–ë–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = f"üèçÔ∏è {model['name']}\nüí∞ –¶–µ–Ω–∞: {model['price']}"
    await bot.send_photo(callback.message.chat.id, model["photo"], caption=text)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await callback.answer()

@dp.message(lambda message: message.text == "–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è")
async def location_handler(message: types.Message):
    await message.answer(f"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è —Ç—É—Ç: {GOOGLE_MAPS_LINK}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
